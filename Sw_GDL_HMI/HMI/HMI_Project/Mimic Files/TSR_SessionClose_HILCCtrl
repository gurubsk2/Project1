ASCII32,8,8,2019,3:31,15,1.1
W,BEGIN,"TSR_SessionClose_HILCCtrl","TSRSessionCloseHILCCtrl"
	TEMPLATE,"",0,0,0,0,0,0,0,0,0,0,0,0
	POSITION,1356,150
	SIZE,350,200,350,200,0,0,0,1280,1024,344,176
	BACKCOLOR,204,204,204,0,0,0
	TITLE,1
	MULTILANG,BEGIN
		LANG_DEFAULT,1033
		LANG,BEGIN,1033
			ROLE_DEFAULT,-1
			ROLE,-1,"Cerrar sesi¢n - Restricci¢n de Velocidad"
		LANG,END
		LANG,BEGIN,1043
			ROLE_DEFAULT,0
			ROLE,0,"LC Sessie Sluiten"
		LANG,END
	MULTILANG,END
	STYLE,0,0,0,1,1,0,0,0,0,1,0,0,0,0,1,0,1
	GRID,1,0,8,8,0,0,0,0,0,0
	LAYERS,65535
	RIGHTS,0,1,0.000000,64.000000,1,65535,0,0
	INCLUDED,0,7,1,400,300
	LINK,1,"",""
	LINK,2,"",""
	LINK,3,"",""
	LINK,4,"",""
	LINK,5,"",""
	LINK,6,"",""
	LINK,7,"",""
	LINK,8,"",""
	LINK,9,"",""
	LINK,10,"",""
	BACKBMP,"",0,0
	BACKOBJECT,"",0,0
	BEFORE,"","","",""
	EVENTS,1
	BINOBJ,"TSR_SessionClose_HILCCtrl.binary"
W,END
VBA_HOSTPROJECT,BEGIN
	'* *******************************************************************************************
	'* Copyright, ALSTOM Transport Information Solutions, 2014. All Rights Reserved.
	'* The software is to be treated as confidential and it may not be copied, used or disclosed
	'* to others unless authorised in writing by ALSTOM Transport Information Solutions.
	'* *******************************************************************************************
	'* Mimic Name:  TSR Session Close HILC Ctrl
	'* *******************************************************************************************
	'* Purpose:     It manages:
	'*      - display of two buttons,
	'*      - sending of HILC commands : EnterSession, Preparation and Confirmation,
	'*      - receiving of the Return Code messages (Preparation and Confirmation),
	'*      - display of HILC command status report in the corresponding field
	'* *******************************************************************************************
	'* Modification History:
	'* Author:              Venkateshwar Vivek
	'* Date:                January 2014
	'* Change:              All
	
	'* *******************************************************************************************
	'* Ref:             1. REQUIREMENTS SPECIFICATION AND ARCHITECTURE DESCRIPTION
	'*                  2. OPERATIONAL HMI INTERFACE DESCRIPTION
	'* *******************************************************************************************
	
	'* Declarations
	'* ***********************************************
	Option Explicit
	
	'* HILC preparation version
	Private Declare Function SetPrepLCApplicatifVersion _
	                Lib "D:\IconisHMI\Product\Bin\HILCPreparationPhase.dll" _
	                Alias "_SetLCApplicatifVersion@4" (ByVal ApplicatifVersion As Long) As Long
	
	
	'* HILC confimation version
	Private Declare Function SetConfLCApplicatifVersion _
	                Lib "D:\IconisHMI\Product\Bin\HILCConfirmationPhase.dll" _
	                Alias "_SetLCApplicatifVersion@4" (ByVal ApplicatifVersion As Long) As Long
	
	'* Encoding format management : AsciiChar
	Private Declare Function EncodingAsciiChar _
	                Lib "D:\IconisHMI\Product\Bin\HILCPreparationPhase.dll" _
	                Alias "_EncodingAsciiChar@0" () As Long
	
	'* HILC Enter Session Message
	Private Declare Function IconisHILCEnterSession _
	                Lib "D:\IconisHMI\Product\Bin\HILCPreparationPhase.dll" _
	                Alias "_IconisHILCEnterSession@12" (pwszMessage As String, _
	                                                    pwszOperatorName As String, _
	                                                    pwszWorkStationName As String) As Long
	
	'* HILC Preparation Message
	Private Declare Function IconisHILCPreparation _
	                Lib "D:\IconisHMI\Product\Bin\HILCPreparationPhase.dll" _
	                Alias "_IconisLCSessionCloseHILCPreparation@28" (ByVal SSTySource As Long, _
	                                                                 ByVal LogIDSource As Long, _
	                                                                 ByVal SSIDSource As Long, _
	                                                                 ByVal SSTyDestination As Long, _
	                                                                 ByVal LogIDDestination As Long, _
	                                                                 ByVal SSIDDestination As Long, _
	                                                                       pwszMessage As String) As Long
	                                                                      
	'* Preparation Message Format
	Private Declare Function SetPrepEncodingFormat _
	                Lib "D:\IconisHMI\Product\Bin\HILCPreparationPhase.dll" _
	                Alias "_SetEncodingFormat@4" (ByVal EncodingFormat As Long) As Long
	
	'* HILC Preparation Return Code Message
	Private Declare Function IconisHILCPreparationReturnCode _
	                Lib "D:\IconisHMI\Product\Bin\HILCPreparationPhase.dll" _
	                Alias "_IconisLCSessionCloseHILCPreparationReturnCode@8" (ByVal pwszMessage As String, _
	                                                                                SRHour As Long) As Long
	                                                                               
	'* Preparation Return Code Message Format
	Private Declare Function SetPrepReturnCodeEncodingFormat _
	                Lib "D:\IconisHMI\Product\Bin\HILCPreparationPhase.dll" _
	                Alias "_SetEncodingFormat@4" (ByVal EncodingFormat As Long) As Long
	                
	'* HILC Confirmation Message
	Private Declare Function IconisHILCConfirmation _
	                Lib "D:\IconisHMI\Product\Bin\HILCConfirmationPhase.dll" _
	                Alias "_IconisLCSessionCloseHILCConfirmation@32" (ByVal SSTySource As Long, _
	                                                                  ByVal LogIDSource As Long, _
	                                                                  ByVal SSIDSource As Long, _
	                                                                  ByVal SSTyDestination As Long, _
	                                                                  ByVal LogIDDestination As Long, _
	                                                                  ByVal SSIDDestination As Long, _
	                                                                  ByVal SRHour As Long, _
	                                                                        pwszMessage As String) As Long
	
	'* Confirmation Message Format
	Private Declare Function SetConfEncodingFormat _
	                Lib "D:\IconisHMI\Product\Bin\HILCConfirmationPhase.dll" _
	                Alias "_SetEncodingFormat@4" (ByVal EncodingFormat As Long) As Long
	                
	'* HILC Confirmation Return Code Message
	Private Declare Function IconisHILCConfirmationReturnCode _
	                Lib "D:\IconisHMI\Product\Bin\HILCConfirmationPhase.dll" _
	                Alias "_IconisLCSessionCloseHILCConfirmationReturnCode@36" (ByVal SSTyDestination As Long, _
	                                                                            ByVal LogIDDestination As Long, _
	                                                                            ByVal SSIDDestination As Long, _
	                                                                            ByVal SSTySource As Long, _
	                                                                            ByVal LogIDSource As Long, _
	                                                                            ByVal SSIDSource As Long, _
	                                                                            ByVal pwszMessage As String, _
	                                                                            ByVal SRHour As Long, _
	                                                                                  FunctionalReport As Long) As Long
	                                                                                
	'* Confirmation Return Code Message Format
	Private Declare Function SetConfReturnCodeEncodingFormat _
	                Lib "D:\IconisHMI\Product\Bin\HILCConfirmationPhase.dll" _
	                Alias "_SetEncodingFormat@4" (ByVal EncodingFormat As Long) As Long
	
	'* Constants
	'* ******************************************************************************************
	Private Const c_strSessionStarted As String = "Session started"
	Private Const c_strSessionStateSeparator As String = ";"
	Private Const c_strHILCCtrlName As String = ".HILCTSRSessionClose"
	Private Const c_strTSROpenSessionMimicName As String = "TSR_SessionOpen_HILCCtrl"
	Private Const c_strWZSessionManagementMimicName As String = "Workzone_Management_View"
	Private Const c_strSessionStateNamePlug As String = ".AdditionalInfo.OperatorInSession.Value.bstrValue"
	
	Private Const c_iNotInProgress As Integer = 0
	Private Const c_iPrepPhaseInProgress As Integer = 1
	Private Const c_iConfPhaseInProgress As Integer = 2
	
	Private Const c_iVersionWZ As Long = 4
	'* OPC variables
	'* ******************************************************************************************
	Dim WithEvents m_OPC_HILCSessionStateValue As Variable
	Dim WithEvents m_OPC_HILCSessionState As Variable
	Dim WithEvents m_OPC_HILCCurrentStepValue As Variable
	
	Dim m_OPC_HILCEnterSession As Variable
	Dim m_OPC_HILCPreparation As Variable
	Dim m_OPC_HILCConfirmation As Variable
	
	Dim m_OPC_SessionStateName As Variable
	
	Dim WithEvents m_OPC_HILCPreparationReturnCode As Variable
	Dim WithEvents m_OPC_HILCConfirmationReturnCode As Variable
	
	'* Source and destination sub-system identifiers
	Dim WithEvents m_OPC_SourceSSTy As Variable
	Dim WithEvents m_OPC_SourceLogID As Variable
	Dim WithEvents m_OPC_SourceSSID As Variable
	Dim WithEvents m_OPC_DestinationSSTy As Variable
	Dim WithEvents m_OPC_DestinationLogID As Variable
	Dim WithEvents m_OPC_DestinationSSID As Variable
	
	'* Module variables
	'* ******************************************************************************************
	'* Flag indicating if the HILC command is in progress
	Private m_iHILCCommandInProgress As Integer
	
	'* Flag indicating that the value of the OPC variable HILCSessionStateValue has been received
	Private m_bSessionStateValueInit As Boolean
	
	'* Memorize the Safety Related Hour returned in the "Preparation Return Code" message
	Private m_lngSRHOUR As Long
	Private m_strViewName As String
	
	Dim WithEvents m_OPC_RemainingTime As Variable
	
	
	
	
	
	'* It manages:
	'*      - Init variables
	'*      - Add the OPC variables to the collection of all permanently subscribed variables
	'* ******************************************************************************************
	Private Sub Mimic_Open()
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "Mimic_Open", "Begin Subroutine")
	    
	    Dim strOPCTreePath As String
	
	    m_strViewName = c_strWZSessionManagementMimicName
	    
	    Variables.Item(ThisMimic.Branch & ".QuestionText%").Value = txtWZQuestion.Text
	   
	    '* Disable the "OK" button
	    Variables.Item(ThisMimic.Branch & ".ButtonOKDisabled%").Value = 1
	    
	    '* Enable the "Cancel" button
	    Variables.Item(ThisMimic.Branch & ".ButtonCancelDisabled%").Value = 0
	    
	    '* Init the status report to an empty string
	    Variables.Item(ThisMimic.Branch & ".StatusValue%").Value = 0
	    
	    '* Init the flag to NotInProgress
	    m_iHILCCommandInProgress = c_iNotInProgress
	    
	    '* Init to False the flag indicating that the value of the OPC variable HILCSessionStateValue
	    '* has been received
	    m_bSessionStateValueInit = False
	    
	    strOPCTreePath = ThisMimic.Branch & c_strHILCCtrlName
	    '* Add the variables to the collection of all permanently subscribed variables
	    Set m_OPC_HILCEnterSession = Variables.Add(strOPCTreePath & ".HILCEnterSession.bstrValue", fvVariableTypeText)
	    Set m_OPC_HILCPreparation = Variables.Add(strOPCTreePath & ".HILCPreparation.bstrValue", fvVariableTypeText)
	    Set m_OPC_HILCConfirmation = Variables.Add(strOPCTreePath & ".HILCConfirmation.bstrValue", fvVariableTypeText)
	
	    If Not (Variables.Item(ThisMimic.Branch & ".TSRSessionForceClosure%") Is Nothing) Then
	        If (Variables.Item(ThisMimic.Branch & ".TSRSessionForceClosure%").Value = True) Then
	            Variables.Item(ThisMimic.Branch & ".QuestionText%").Value = txtWZForcedQuestion.Text
	        Else
	            Variables.Item(ThisMimic.Branch & ".QuestionText%").Value = txtWZQuestion.Text
	        End If
	    Else
	        Variables.Item(ThisMimic.Branch & ".QuestionText%").Value = txtWZQuestion.Text
	    End If
	    
	    SetPrepLCApplicatifVersion c_iVersionWZ
	    SetConfLCApplicatifVersion c_iVersionWZ
	    
	    '* Add variables to the collection of all permanently subscribed variables
	    '* and set the property EnableEvents of variables to True
	    
	    Set m_OPC_HILCSessionState = Variables.Add(strOPCTreePath & ".HILCSessionState.bstrValue", fvVariableTypeText)
	    If ((m_OPC_HILCSessionState.Status = fvVariableStatusGood) And (m_OPC_HILCSessionState.EnableEvents = True)) Then
	        m_OPC_HILCSessionState_ValueChange
	    Else
	        m_OPC_HILCSessionState.EnableEvents = True
	    End If
	    
	    Set m_OPC_HILCSessionStateValue = Variables.Add(strOPCTreePath & ".HILCSessionStateValue.Value", fvVariableTypeRegister)
	    If ((m_OPC_HILCSessionStateValue.Status = fvVariableStatusGood) And (m_OPC_HILCSessionStateValue.EnableEvents = True)) Then
	        m_OPC_HILCSessionStateValue_ValueChange
	    Else
	        m_OPC_HILCSessionStateValue.EnableEvents = True
	    End If
	    
	    Set m_OPC_HILCCurrentStepValue = Variables.Add(strOPCTreePath & ".HILCCurrentStepValue.Value", fvVariableTypeRegister)
	    If ((m_OPC_HILCCurrentStepValue.Status = fvVariableStatusGood) And (m_OPC_HILCCurrentStepValue.EnableEvents = True)) Then
	        m_OPC_HILCCurrentStepValue_ValueChange
	    Else
	        m_OPC_HILCCurrentStepValue.EnableEvents = True
	    End If
	    
	    Set m_OPC_HILCPreparationReturnCode = Variables.Add(strOPCTreePath & ".HILCPreparationCode.bstrValue", fvVariableTypeText)
	    If ((m_OPC_HILCPreparationReturnCode.Status = fvVariableStatusGood) And (m_OPC_HILCPreparationReturnCode.EnableEvents = True)) Then
	        m_OPC_HILCPreparationReturnCode_ValueChange
	    Else
	        m_OPC_HILCPreparationReturnCode.EnableEvents = True
	    End If
	    
	    Set m_OPC_HILCConfirmationReturnCode = Variables.Add(strOPCTreePath & ".HILCConfirmationCode.bstrValue", fvVariableTypeText)
	    If ((m_OPC_HILCConfirmationReturnCode.Status = fvVariableStatusGood) And (m_OPC_HILCConfirmationReturnCode.EnableEvents = True)) Then
	        m_OPC_HILCConfirmationReturnCode_ValueChange
	    Else
	        m_OPC_HILCConfirmationReturnCode.EnableEvents = True
	    End If
	    
	    Set m_OPC_SourceSSTy = Variables.Add(strOPCTreePath & ".SourceSSTy.Value", fvVariableTypeAny)
	    If ((m_OPC_SourceSSTy.Status = fvVariableStatusGood) And (m_OPC_SourceSSTy.EnableEvents = True)) Then
	        m_OPC_SourceSSTy_ValueChange
	    Else
	        m_OPC_SourceSSTy.EnableEvents = True
	    End If
	    
	    Set m_OPC_SourceLogID = Variables.Add(strOPCTreePath & ".SourceLogID.Value", fvVariableTypeAny)
	    If ((m_OPC_SourceLogID.Status = fvVariableStatusGood) And (m_OPC_SourceLogID.EnableEvents = True)) Then
	        m_OPC_SourceLogID_ValueChange
	    Else
	        m_OPC_SourceLogID.EnableEvents = True
	    End If
	    
	    Set m_OPC_SourceSSID = Variables.Add(strOPCTreePath & ".SourceSSID.Value", fvVariableTypeAny)
	    If ((m_OPC_SourceSSID.Status = fvVariableStatusGood) And (m_OPC_SourceSSID.EnableEvents = True)) Then
	        m_OPC_SourceSSID_ValueChange
	    Else
	        m_OPC_SourceSSID.EnableEvents = True
	    End If
	    
	    Set m_OPC_DestinationSSTy = Variables.Add(strOPCTreePath & ".DestinationSSTy.Value", fvVariableTypeAny)
	    If ((m_OPC_DestinationSSTy.Status = fvVariableStatusGood) And (m_OPC_DestinationSSTy.EnableEvents = True)) Then
	        m_OPC_DestinationSSTy_ValueChange
	    Else
	        m_OPC_DestinationSSTy.EnableEvents = True
	    End If
	    
	    Set m_OPC_DestinationLogID = Variables.Add(strOPCTreePath & ".DestinationLogID.Value", fvVariableTypeAny)
	    If ((m_OPC_DestinationLogID.Status = fvVariableStatusGood) And (m_OPC_DestinationLogID.EnableEvents = True)) Then
	        m_OPC_DestinationLogID_ValueChange
	    Else
	        m_OPC_DestinationLogID.EnableEvents = True
	    End If
	    
	    Set m_OPC_DestinationSSID = Variables.Add(strOPCTreePath & ".DestinationSSID.Value", fvVariableTypeAny)
	    If ((m_OPC_DestinationSSID.Status = fvVariableStatusGood) And (m_OPC_DestinationSSID.EnableEvents = True)) Then
	        m_OPC_DestinationSSID_ValueChange
	    Else
	        m_OPC_DestinationSSID.EnableEvents = True
	    End If
	    
	    'Add the variable into which we write the name of the operator after successful session opening
	    Set m_OPC_SessionStateName = Variables.Add(ThisMimic.Branch & c_strSessionStateNamePlug, fvVariableTypeText)
	
	Exit Sub
	    
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "Mimic_Open", Err.Description)
	End Sub
	
	
	'* Before closing the mimic, unsubscribe all the previously subscribed variables
	'* *****************************************************************************
	Private Function Mimic_BeforeClose() As Boolean
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "Mimic_BeforeClose", "Begin Function")
	    
	    If Not (Variables.Item(ThisMimic.Branch & ".TSRSessionForceClosure%") Is Nothing) Then
	        Variables.Remove (ThisMimic.Branch & ".TSRSessionForceClosure%")
	    End If
	    
	    Call RemoveVariables
	    
	Exit Function
	    
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "Mimic_BeforeClose", Err.Description)
	End Function
	
	'* Unsubscribe all the previously subscribed variables to remove any possibility of interference
	'* ***********************************************************************************************
	
	Private Sub RemoveVariables()
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "RemoveVariables", "Begin Subroutine")
	
	
	    If Not (m_OPC_RemainingTime Is Nothing) Then
	        Variables.Remove (m_OPC_RemainingTime.Name)
	        Set m_OPC_RemainingTime = Nothing
	    End If
	        
	    If Not (m_OPC_HILCSessionStateValue Is Nothing) Then
	        Variables.Remove (m_OPC_HILCSessionStateValue.Name)
	        Set m_OPC_HILCSessionStateValue = Nothing
	    End If
	    
	    If Not (m_OPC_HILCSessionState Is Nothing) Then
	        Variables.Remove (m_OPC_HILCSessionState.Name)
	        Set m_OPC_HILCSessionState = Nothing
	    End If
	    
	    If Not (m_OPC_HILCCurrentStepValue Is Nothing) Then
	        Variables.Remove (m_OPC_HILCCurrentStepValue.Name)
	        Set m_OPC_HILCCurrentStepValue = Nothing
	    End If
	    
	    If Not (m_OPC_HILCEnterSession Is Nothing) Then
	        Variables.Remove (m_OPC_HILCEnterSession.Name)
	        Set m_OPC_HILCEnterSession = Nothing
	    End If
	    
	    If Not (m_OPC_HILCPreparation Is Nothing) Then
	        Variables.Remove (m_OPC_HILCPreparation.Name)
	        Set m_OPC_HILCPreparation = Nothing
	    End If
	    
	    If Not (m_OPC_HILCPreparationReturnCode Is Nothing) Then
	        Variables.Remove (m_OPC_HILCPreparationReturnCode.Name)
	        Set m_OPC_HILCPreparationReturnCode = Nothing
	    End If
	    
	    If Not (m_OPC_HILCConfirmation Is Nothing) Then
	        Variables.Remove (m_OPC_HILCConfirmation.Name)
	        Set m_OPC_HILCConfirmation = Nothing
	    End If
	    
	    If Not (m_OPC_HILCConfirmationReturnCode Is Nothing) Then
	        Variables.Remove (m_OPC_HILCConfirmationReturnCode.Name)
	        Set m_OPC_HILCConfirmationReturnCode = Nothing
	    End If
	    
	    If Not (m_OPC_SourceSSTy Is Nothing) Then
	        Variables.Remove (m_OPC_SourceSSTy.Name)
	        Set m_OPC_SourceSSTy = Nothing
	    End If
	    
	    If Not (m_OPC_SourceLogID Is Nothing) Then
	        Variables.Remove (m_OPC_SourceLogID.Name)
	        Set m_OPC_SourceLogID = Nothing
	    End If
	    
	    If Not (m_OPC_SourceSSID Is Nothing) Then
	        Variables.Remove (m_OPC_SourceSSID.Name)
	        Set m_OPC_SourceSSID = Nothing
	    End If
	    
	    If Not (m_OPC_DestinationSSTy Is Nothing) Then
	        Variables.Remove (m_OPC_DestinationSSTy.Name)
	        Set m_OPC_DestinationSSTy = Nothing
	    End If
	    
	    If Not (m_OPC_DestinationLogID Is Nothing) Then
	        Variables.Remove (m_OPC_DestinationLogID.Name)
	        Set m_OPC_DestinationLogID = Nothing
	    End If
	    
	    If Not (m_OPC_DestinationSSID Is Nothing) Then
	        Variables.Remove (m_OPC_DestinationSSID.Name)
	        Set m_OPC_DestinationSSID = Nothing
	    End If
	    
	Exit Sub
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "RemoveVariables", Err.Description)
	End Sub
	'* It manages :
	'*      - Disable the "OK" button
	'*      - Send HILCEnterSessionMessage
	'* *****************************************************************************
	Private Sub ButtonOK_Click()
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "ButtonOK_Click", "Begin Subroutine")
	    
	    If (CBool(Variables.Item(ThisMimic.Branch & ".ButtonOKDisabled%").Value) = True) Then Exit Sub
	    
	    '* Disable the "OK" button
	    Variables.Item(ThisMimic.Branch & ".ButtonOKDisabled%").Value = 1
	'''    SetCheckBoxesAbility 1, True
	'''    SetCheckBoxesAbility 2, True
	   
	    If (m_OPC_HILCSessionStateValue.Status <> fvVariableStatusGood) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "ButtonOK_Click", _
	                     "The status of " & m_OPC_HILCSessionStateValue.Name & " is not good")
	        '* Stop the process
	        StopHILCCommand (9)
	    ElseIf (m_OPC_HILCSessionStateValue.Quality <> 192) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "ButtonOK_Click", _
	                     "The quality of " & m_OPC_HILCSessionStateValue.Name & " is not good")
	        '* Stop the process
	        StopHILCCommand (9)
	    Else '* The status and the quality of the variable are good
	        
	        If (m_OPC_HILCSessionStateValue.Value = 1) Then       '* Session Started
	            '* Display the status report "Control failed"
	            Variables.Item(ThisMimic.Branch & ".StatusValue%").Value = 9
	        
	            '* Enable the "Close" button of the "TSR Session Management" mimic
	            Variables.Item(ThisMimic.Branch & ".ButtonCloseEnabled%").Value = 1
	       
	        ElseIf (m_OPC_HILCSessionStateValue.Value = 0) Then   '* No session
	            '* Set the flag to PrepPhaseInProgress
	            m_iHILCCommandInProgress = c_iPrepPhaseInProgress
	            '* Disable the "Cancel" button (As per comments frm SPL Enable the "Cancel" button)
	            Variables.Item(ThisMimic.Branch & ".ButtonCancelDisabled%").Value = 0
	            '* Display the status report "Control in progress"
	            Variables.Item(ThisMimic.Branch & ".StatusValue%").Value = 8
	            '* Send the Enter Session message
	            If (SendHILCEnterSessionMessage = False) Then
	                '* Stop the process
	                StopHILCCommand (9)
	            End If
	        End If
	    End If
	
	Exit Sub
	    
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "ButtonOK_Click", Err.Description)
	End Sub
	
	'* Set the encoding format : AsciiChar
	'* Build the "Enter Session" message
	'* Set the result in the variable associated to the OPC variable HILCEnterSession.Value
	'* ******************************************************************************************
	Private Function SendHILCEnterSessionMessage() As Boolean
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "SendHILCEnterSessionMessage", "Begin Function")
	    
	    Dim lngResult As Long
	    Dim strMessage As String
	    Dim strOperatorName As String
	    Dim strWorkStationName As String
	    
	    '* Set the encoding format : AsciiChar
	    lngResult = SetPrepEncodingFormat(EncodingAsciiChar)
	    If (lngResult = -1) Then '* Fail
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "SendHILCEnterSessionMessage", _
	                     "Setting of the AsciiChar encoding format has failed")
	        SendHILCEnterSessionMessage = False
	    Else
	        '* Build the "Enter Session" message
	        lngResult = IconisHILCEnterSession(strMessage, strOperatorName, strWorkStationName)
	        If (lngResult = -1) Then '* Fail
	            Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "SendHILCEnterSessionMessage", _
	                         "Building of the EnterSession message has failed")
	            SendHILCEnterSessionMessage = False
	        Else
	            '* Check if the status and quality of the OPC variable are good
	            If (m_OPC_HILCEnterSession.Status <> fvVariableStatusGood) Then
	                Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "SendHILCEnterSessionMessage", _
	                             "The status of " & m_OPC_HILCEnterSession.Name & " is not good")
	                SendHILCEnterSessionMessage = False
	            ElseIf (m_OPC_HILCEnterSession.Quality <> 192) Then
	                Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "SendHILCEnterSessionMessage", _
	                             "The quality of " & m_OPC_HILCEnterSession.Name & " is not good")
	                SendHILCEnterSessionMessage = False
	            Else
	                '* Send the message in the OPC variable
	                m_OPC_HILCEnterSession.Value = strMessage
	                Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "SendHILCEnterSessionMessage", _
	                             "The EnterSession message has been sent")
	                SendHILCEnterSessionMessage = True
	            End If
	        End If
	    End If
	
	Exit Function
	
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "SendHILCEnterSessionMessage", Err.Description)
	End Function
	
	'* Set the encoding format : AsciiChar
	'* Build the "Preparation" message
	'* Set the result in the variable associated to the OPC variable HILCPreparation.Value
	'* *****************************************************************************************
	Private Function SendHILCPreparationMessage() As Boolean
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "SendHILCPreparationMessage", "Begin Function")
	    
	    Dim lngResult As Long
	    Dim strMessage As String
	    
	    '* Set the encoding format : AsciiChar
	    lngResult = SetPrepEncodingFormat(EncodingAsciiChar)
	    If (lngResult = -1) Then '* Fail
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "SendHILCPreparationMessage", _
	                     "Setting of the AsciiChar encoding format has failed")
	        SendHILCPreparationMessage = False
	    Else
	        '* Build the "Preparation" message
	        lngResult = IconisHILCPreparation(m_OPC_SourceSSTy.Value, _
	                                          m_OPC_SourceLogID.Value, _
	                                          m_OPC_SourceSSID.Value, _
	                                          m_OPC_DestinationSSTy.Value, _
	                                          m_OPC_DestinationLogID.Value, _
	                                          m_OPC_DestinationSSID.Value, _
	                                          strMessage)
	        If (lngResult = -1) Then '* Fail
	            Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "SendHILCPreparationMessage", _
	                         "Building of the Preparation message has failed")
	            SendHILCPreparationMessage = False
	        Else
	            '* Check if the status and quality of the OPC variable are good
	            If (m_OPC_HILCPreparation.Status <> fvVariableStatusGood) Then
	                Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "SendHILCPreparationMessage", _
	                             "The status of " & m_OPC_HILCPreparation.Name & " is not good")
	                SendHILCPreparationMessage = False
	            Else
	                If (m_OPC_HILCPreparation.Quality <> 192) Then
	                    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "SendHILCPreparationMessage", _
	                                "The quality of " & m_OPC_HILCPreparation.Name & " is not good")
	                    SendHILCPreparationMessage = False
	                Else
	                    '* Send the message in the OPC variable
	                    m_OPC_HILCPreparation.Value = strMessage
	                    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "SendHILCPreparationMessage", _
	                                 "The Preparation message has been sent")
	                    SendHILCPreparationMessage = True
	                End If
	            End If
	        End If
	    End If
	
	Exit Function
	
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "SendHILCPreparationMessage", Err.Description)
	End Function
	
	'* Set the encoding format : AsciiChar
	'* Decode the "Preparation Return Code" message
	'* *********************************************************************************
	Private Function CheckPreparationMessageReturnCode() As Boolean
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "CheckPreparationMessageReturnCode", "Begin Function")
	    
	    Dim lngResult As Long
	
	    '* Set the encoding format : AsciiChar
	    lngResult = SetPrepReturnCodeEncodingFormat(EncodingAsciiChar)
	    If (lngResult = -1) Then '* Fail
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "CheckPreparationMessageReturnCode", _
	                     "Setting of the AsciiChar encoding format has failed")
	        CheckPreparationMessageReturnCode = False
	    Else
	        '* Decode the "Preparation Return Code" message
	        lngResult = IconisHILCPreparationReturnCode(m_OPC_HILCPreparationReturnCode.Value, m_lngSRHOUR)
	        If (lngResult = -1) Then '* Fail
	            Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "CheckPreparationMessageReturnCode", _
	                         "Decoding of the Preparation Return Code message has failed")
	            CheckPreparationMessageReturnCode = False
	        Else
	            CheckPreparationMessageReturnCode = True
	        End If
	    End If
	
	Exit Function
	
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "CheckPreparationMessageReturnCode", Err.Description)
	End Function
	
	'* Set the encoding format : AsciiChar
	'* Build the "Confirmation" message
	'* Set the result in the variable associated to the OPC variable HILCConfirmation.Value
	'* *********************************************************************************************
	Private Function SendHILCConfirmationMessage() As Boolean
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "SendHILCConfirmationMessage", "Begin Function")
	
	    Dim lngResult As Long
	    Dim strMessage As String
	
	    '* Set the encoding format : AsciiChar
	    lngResult = SetConfEncodingFormat(EncodingAsciiChar)
	    If (lngResult = -1) Then '* Fail
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "SendHILCConfirmationMessage", _
	                     "Setting of the AsciiChar encoding format has failed")
	        SendHILCConfirmationMessage = False
	    Else
	        '* Build the "Confirmation" message
	        lngResult = IconisHILCConfirmation(m_OPC_SourceSSTy.Value, _
	                                           m_OPC_SourceLogID.Value, _
	                                           m_OPC_SourceSSID.Value, _
	                                           m_OPC_DestinationSSTy.Value, _
	                                           m_OPC_DestinationLogID.Value, _
	                                           m_OPC_DestinationSSID.Value, _
	                                           m_lngSRHOUR, _
	                                           strMessage)
	        If (lngResult = -1) Then '* Fail
	            Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "SendHILCConfirmationMessage", _
	                         "Building of the Confirmation message has failed")
	            SendHILCConfirmationMessage = False
	        Else
	            '* Check if the status and quality of the OPC variable are good
	            If (m_OPC_HILCConfirmation.Status <> fvVariableStatusGood) Then
	                Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "SendHILCConfirmationMessage", _
	                             "HILCConfirmation OPC variable status is not good")
	                SendHILCConfirmationMessage = False
	            ElseIf (m_OPC_HILCConfirmation.Quality <> 192) Then
	                Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "SendHILCConfirmationMessage", _
	                             "HILCConfirmation OPC variable quality is not good")
	                SendHILCConfirmationMessage = False
	            Else
	                '* Send the message in the OPC variable
	                m_OPC_HILCConfirmation.Value = strMessage
	                Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "SendHILCConfirmationMessage", _
	                             "The Confirmation message has been sent")
	                SendHILCConfirmationMessage = True
	            End If
	        End If
	    End If
	    
	Exit Function
	
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "SendHILCConfirmationMessage", Err.Description)
	End Function
	
	'* Call the function which decodes the Preparation Return Code (SRHour) message
	'* Call the function which build and send the Confirmation message
	'* *********************************************************************************
	Private Sub CheckPreparationCode_SendConfirmationMessage()
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "CheckPreparationCode_SendConfirmationMessage", "Begin Subroutine")
	    
	    '* If the current step is "Preparation message acknowledged" (value = 5)
	    '* and a "Preparation Return Code" message has been received
	    If ((m_OPC_HILCCurrentStepValue.Value = 5) And (m_OPC_HILCPreparationReturnCode.Value <> "")) Then
	        '* Check Preparation Return Code message
	        If (CheckPreparationMessageReturnCode = False) Then
	            '* Stop the process
	            StopHILCCommand (9)
	        Else
	            '* Set the flag to ConfPhaseInProgress
	            m_iHILCCommandInProgress = c_iConfPhaseInProgress
	    
	            '* Send the Confirmation message
	            If (SendHILCConfirmationMessage = False) Then
	                '* Stop the process
	                StopHILCCommand (9)
	            End If
	        End If
	    End If
	            
	Exit Sub
	
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "CheckPreparationCode_SendConfirmationMessage", Err.Description)
	End Sub
	
	'* Set the encoding format : AsciiChar
	'* Decode the "Confirmation Return Code" message
	'* Check the functional report provided in the decoded message : if the session
	'* closing has been performed, close this mimic and the "TSR Session Management"
	'* mimic
	'* *********************************************************************************
	Private Sub CheckConfirmationMessageReturnCode()
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "CheckConfirmationMessageReturnCode", "Begin Subroutine")
	
	    Dim lngResult As Long
	    Dim lngFunctionalReport As Long
	    
	    '* If the flag is equal to ConfPhaseInProgress
	    '* and the current step is "Confirmation message acknowledged" (value = 9)
	    '* and a "Confirmation Return Code" message has been received
	    If ((m_iHILCCommandInProgress = c_iConfPhaseInProgress) And _
	        (m_OPC_HILCCurrentStepValue.Value = 9) And (m_OPC_HILCConfirmationReturnCode.Value <> "")) Then
	        '* Set the encoding format : AsciiChar
	        lngResult = SetConfReturnCodeEncodingFormat(EncodingAsciiChar)
	        
	        If (lngResult = -1) Then '* Fail
	            Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "CheckConfirmationMessageReturnCode", _
	                         "Setting of the AsciiChar encoding format has failed")
	            '* Stop the process
	            StopHILCCommand (9)
	        Else
	            '* Decode the "Confirmation Return Code" message
	            lngResult = IconisHILCConfirmationReturnCode(m_OPC_DestinationSSTy.Value, _
	                                                         m_OPC_DestinationLogID.Value, _
	                                                         m_OPC_DestinationSSID.Value, _
	                                                         m_OPC_SourceSSTy.Value, _
	                                                         m_OPC_SourceLogID.Value, _
	                                                         m_OPC_SourceSSID.Value, _
	                                                         m_OPC_HILCConfirmationReturnCode.Value, _
	                                                         m_lngSRHOUR, _
	                                                         lngFunctionalReport)
	            If (lngResult = -1) Then '* Fail
	                Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "CheckConfirmationMessageReturnCode", _
	                             "Decoding of the Confirmation Return Code message has failed")
	                '* Stop the process
	                StopHILCCommand (9)
	            Else
	                If (lngFunctionalReport = 0) Then '* The request has not been performed
	                    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "CheckConfirmationMessageReturnCode", _
	                                 "The session closing has not been performed")
	                    '* Stop the process
	                    StopHILCCommand (9)
	                Else '* The request has been performed
	                    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "CheckConfirmationMessageReturnCode", _
	                                 "The session closing has been performed")
	
	                    'Write the operator into the plug
	
	                    '* Check if the status and quality of the OPC variable are good
	                    If (m_OPC_SessionStateName.Status <> fvVariableStatusGood) Then
	                        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "SendHILCConfirmationMessage", _
	                                     "The operator name couldnot be removed, opc plug status is not good")
	                        
	                    ElseIf (m_OPC_HILCConfirmation.Quality <> 192) Then
	                        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "SendHILCConfirmationMessage", _
	                                     "The operator name couldnot be removed, opc plug quality is not good")
	                        
	                    Else
	                        '* Send the message in the OPC variable
	                        m_OPC_SessionStateName.Value = ""
	                        Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "SendHILCConfirmationMessage", _
	                                     "The operator name has been removed successfully")
	                        
	                    End If
	
	                    '* Close the "TSR Session Management" mimic
	                    Iconis_MOD_Navigation.CloseView m_strViewName, ThisMimic.Branch, ThisMimic.Region
	                    
	                    '* Check if the closure of the TSR session has been forced
	                    If (Not (Variables.Item(ThisMimic.Branch & ".TSRSessionForceClosure%") Is Nothing)) Then
	                        If (Variables.Item(ThisMimic.Branch & ".TSRSessionForceClosure%").Value = True) Then
	                        
	                            '* wait for remainingtime to be reset
	                            Set m_OPC_RemainingTime = Variables.Add(ThisMimic.Branch & ".RemainingTime.Value")
	                            If ((m_OPC_RemainingTime.Status = fvVariableStatusGood) And (m_OPC_RemainingTime.EnableEvents = True)) Then
	                                m_OPC_RemainingTime_ValueChange
	                            Else
	                                m_OPC_RemainingTime.EnableEvents = True
	                            End If
	                            Exit Sub
	                        End If
	                    End If
	                    
	                    '* Close this mimic
	                    ThisMimic.Close
	                End If
	            End If
	        End If
	    End If
	    
	Exit Sub
	
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "CheckConfirmationMessageReturnCode", Err.Description)
	End Sub
	
	'* For the variable associated to the OPC variable : m_OPC_RemainingTime
	'* *********************************************************************************
	Private Sub m_OPC_RemainingTime_ValueChange()
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_RemainingTime_ValueChange", "Begin Subroutine")
	     
	    '* Check the status and the quality of the variable
	    If (m_OPC_RemainingTime.Status = fvVariableStatusWaiting) Then
	        Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_RemainingTime_ValueChange", "The Status of " & m_OPC_RemainingTime.Name & " is waiting")
	    ElseIf (m_OPC_RemainingTime.Status = fvVariableStatusConfigError) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_RemainingTime_ValueChange", "The Status of " & m_OPC_RemainingTime.Name & " is config Error")
	    ElseIf (m_OPC_RemainingTime.Status = fvVariableStatusNotConnected) Then
	        Call CBTrace(CBTRACE_VAR, ThisMimic.Name, "m_OPC_RemainingTime_ValueChange", "The Status of " & m_OPC_RemainingTime.Name & " is not connected")
	    ElseIf (m_OPC_RemainingTime.Quality <> 192) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_RemainingTime_ValueChange", "The Quality of " & m_OPC_RemainingTime.Name & " is not Good")
	    Else '* Status and Quality are good
	         If (m_OPC_RemainingTime.Value <= 0) Then
	           
	            '* Add a variable indicating if the process of TSR session opening can be launched automatically
	            Variables.Add (ThisMimic.Branch & ".TSRSessionAutomaticOpening%"), fvVariableTypeBit
	            '* Set to True this variable
	            Variables.Item(ThisMimic.Branch & ".TSRSessionAutomaticOpening%").Value = True
	            'Remove variables in the existing mimic to avoid interference with the ones in the new mimic called
	            RemoveVariables
	            '* Open the "TSR Open Session" mimic
	           
	           'Mimics.Open c_strTSROpenSessionMimicName, ThisMimic.Branch, , , , , , , 628, 444, True
	            Call OpenMimicInCenter(c_strTSROpenSessionMimicName, ThisMimic.Branch, Getmousepointerpossition)
	          
	            '* Close this mimic
	            ThisMimic.Close
	        End If
	    End If
	Exit Sub
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "Mimic_Open", Err.Description)
	End Sub
	
	'* Display the given status report
	'* Enable the "Cancel" button
	'* Enable the "Close" button of the "TSR Session Management" mimic
	'* *********************************************************************************
	Private Sub StopHILCCommand(ByVal StateValue As Integer)
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "StopHILCCommand", "Begin Subroutine")
	
	    '* Set the value of the parameter in the variable StatusValue% (used in the field "Status")
	    Variables.Item(ThisMimic.Branch & ".StatusValue%").Value = StateValue
	        
	    '* Enable the "Cancel" button
	    Variables.Item(ThisMimic.Branch & ".ButtonCancelDisabled%").Value = 0
	
	    '* Enable the "Close" button of the "TSR Session Management" mimic
	    Variables.Item(ThisMimic.Branch & ".ButtonCloseEnabled%").Value = 1
	    
	Exit Sub
	    
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "StopHILCCommand", Err.Description)
	End Sub
	          
	'* For the variable associated to the OPC variable : HILCCurrentStepValue.Value
	'* ***********************************************************************************
	Private Sub m_OPC_HILCCurrentStepValue_ValueChange()
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_HILCCurrentStepValue_ValueChange", "Begin Subroutine")
	    
	    Dim strTraceMsg As String
	
	    If (m_iHILCCommandInProgress = c_iNotInProgress) Then '* No HILC in progress
	        Call CBTrace(CBTRACE_VAR, ThisMimic.Name, "m_OPC_HILCCurrentStepValue_ValueChange", "The flag HILCCommandInProgress is equal to false")
	    Else
	        '* Check the status and the quality of the variable
	        If (m_OPC_HILCCurrentStepValue.Status = fvVariableStatusWaiting) Then
	            Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_HILCCurrentStepValue_ValueChange", "The Status of " & m_OPC_HILCCurrentStepValue.Name & " is waiting")
	        ElseIf (m_OPC_HILCCurrentStepValue.Status = fvVariableStatusConfigError) Then
	            Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_HILCCurrentStepValue_ValueChange", "The Status of " & m_OPC_HILCCurrentStepValue.Name & " is config Error")
	        ElseIf (m_OPC_HILCCurrentStepValue.Status = fvVariableStatusNotConnected) Then
	            Call CBTrace(CBTRACE_VAR, ThisMimic.Name, "m_OPC_HILCCurrentStepValue_ValueChange", "The Status of " & m_OPC_HILCCurrentStepValue.Name & " is not connected")
	        ElseIf (m_OPC_HILCCurrentStepValue.Quality <> 192) Then '* The quality of the variable is not good
	            Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_HILCCurrentStepValue_ValueChange", "The Quality of " & m_OPC_HILCCurrentStepValue.Name & " is not Good")
	            '* Stop the process
	            StopHILCCommand (9)
	        Else '* The quality of the variable is good
	            strTraceMsg = "HILC current step value : " & Format(m_OPC_HILCCurrentStepValue.Value)
	            Call CBTrace(CBTRACE_VAR, ThisMimic.Name, "m_OPC_HILCCurrentStepValue_ValueChange", strTraceMsg)
	            
	            If ((m_OPC_HILCCurrentStepValue.Value = 0) Or _
	                (m_OPC_HILCCurrentStepValue.Value = 4) Or _
	                (m_OPC_HILCCurrentStepValue.Value = 7)) Then
	                '* 0 : "No HILC in progress" or
	                '* 4 : "Preparation message sent" or
	                '* 7 : "Confirmation message sent"
	                '*  -> Nothing to do
	            ElseIf (m_OPC_HILCCurrentStepValue.Value = 1) Then
	                    '* 1 : "Init"
	                    '* -> Send the Preparation message
	                    If (SendHILCPreparationMessage = False) Then
	                        StopHILCCommand (9)
	                    End If
	            ElseIf (m_OPC_HILCCurrentStepValue.Value = 5) Then
	                    '* 5 : "Preparation message acknowledged"
	                    '* -> Check the Preparation Return Code message
	                    '*    and send the Confirmation message
	                    CheckPreparationCode_SendConfirmationMessage
	            ElseIf (m_OPC_HILCCurrentStepValue.Value = 9) Then
	                    '* 9 : "Confirmation message acknowledged"
	                    '* -> Check the Confirmation Return Code message
	                    
	                    CheckConfirmationMessageReturnCode
	            ElseIf ((m_OPC_HILCCurrentStepValue.Value = 2) Or _
	                    (m_OPC_HILCCurrentStepValue.Value = 3) Or _
	                    (m_OPC_HILCCurrentStepValue.Value = 6) Or _
	                    (m_OPC_HILCCurrentStepValue.Value = 8) Or _
	                    (m_OPC_HILCCurrentStepValue.Value = 10)) Then
	                    '* 2 : "Init failed" or
	                    '* 3 : "Preparation message timeout" or
	                    '* 6 : "Preparation message acknowledgement timeout" or
	                    '* 8 : "Confirmation message timeout" or
	                    '* 10 : "Confirmation message acknowledgement timeout"
	                    '* -> Stop the process
	                    StopHILCCommand (9)
	            Else    '* Invalid current step value
	                    '* -> Stop the process
	                    StopHILCCommand (9)
	            End If
	        End If
	    End If
	    
	Exit Sub
	    
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_HILCCurrentStepValue_ValueChange", Err.Description)
	End Sub
	
	'* For the variable associated to the OPC variable : HILCSessionStateValue.Value
	'* *********************************************************************************
	Private Sub m_OPC_HILCSessionStateValue_ValueChange()
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_HILCSessionStateValue_ValueChange", "Begin Subroutine")
	
	    Dim strTraceMsg As String
	     
	    '* Check the status and the quality of the variable
	    If (m_OPC_HILCSessionStateValue.Status = fvVariableStatusWaiting) Then
	        Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_HILCSessionStateValue_ValueChange", "The Status of " & m_OPC_HILCSessionStateValue.Name & " is waiting")
	    ElseIf (m_OPC_HILCSessionStateValue.Status = fvVariableStatusConfigError) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_HILCSessionStateValue_ValueChange", "The Status of " & m_OPC_HILCSessionStateValue.Name & " is config Error")
	    ElseIf (m_OPC_HILCSessionStateValue.Status = fvVariableStatusNotConnected) Then
	        Call CBTrace(CBTRACE_VAR, ThisMimic.Name, "m_OPC_HILCSessionStateValue_ValueChange", "The Status of " & m_OPC_HILCSessionStateValue.Name & " is not connected")
	    ElseIf (m_OPC_HILCSessionStateValue.Quality <> 192) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_HILCSessionStateValue_ValueChange", "The Quality of " & m_OPC_HILCSessionStateValue.Name & " is not Good")
	    Else '* Status and Quality are good
	        strTraceMsg = "Value of SessionState : " & Format(m_OPC_HILCSessionStateValue.Value)
	        Call CBTrace(CBTRACE_VAR, ThisMimic.Name, "m_OPC_HILCSessionStateValue_ValueChange", strTraceMsg)
	        
	        If ((m_bSessionStateValueInit = False) And (m_iHILCCommandInProgress = c_iNotInProgress)) Then
	            '* Set to true the flag indicating that the value of this variable has been received
	            m_bSessionStateValueInit = True
	            
	            '* Enable the "OK" button
	            Variables.Item(ThisMimic.Branch & ".ButtonOKDisabled%").Value = 0
	        End If
	    End If
	    
	Exit Sub
	    
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_HILCSessionStateValue_ValueChange", Err.Description)
	End Sub
	
	'* For the variable associated to the OPC variable : HILCSessionState.Value
	'* *********************************************************************************
	Private Sub m_OPC_HILCSessionState_ValueChange()
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_HILCSessionState_ValueChange", "Begin Subroutine")
	    
	    '* Check the status and the quality of the variable
	    If (m_OPC_HILCSessionState.Status = fvVariableStatusWaiting) Then
	        Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_HILCSessionState_ValueChange", "The Status of " & m_OPC_HILCSessionState.Name & " is waiting")
	    ElseIf (m_OPC_HILCSessionState.Status = fvVariableStatusConfigError) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_HILCSessionState_ValueChange", "The Status of " & m_OPC_HILCSessionState.Name & " is config Error")
	    ElseIf (m_OPC_HILCSessionState.Status = fvVariableStatusNotConnected) Then
	        Call CBTrace(CBTRACE_VAR, ThisMimic.Name, "m_OPC_HILCSessionState_ValueChange", "The Status of " & m_OPC_HILCSessionState.Name & " is not connected")
	    ElseIf (m_OPC_HILCSessionState.Quality <> 192) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_HILCSessionState_ValueChange", "The Quality of " & m_OPC_HILCSessionState.Name & " is not Good")
	    Else
	        If (m_iHILCCommandInProgress = c_iPrepPhaseInProgress) Then '* Preparation phase
	            Dim strValue() As String
	            '* Retreive the session state, session workstation name and operator name
	            strValue = Split(m_OPC_HILCSessionState.Value, c_strSessionStateSeparator)
	            '* If (the current session state is equal to "Session started") and
	            '*    ((workstation name is not equal to the current workstation name) or
	            '*     (operator name is not equal to the operator name currently logged))
	            If ((StrComp(strValue(0), c_strSessionStarted, vbTextCompare) = 0) And _
	                ((StrComp(strValue(2), ThisSystem.ComputerName, vbTextCompare) <> 0) Or _
	                 (StrComp(strValue(1), Thisproject.UserName, vbTextCompare) <> 0))) Then
	                '* Stop the process
	                StopHILCCommand (1)
	            End If
	        End If
	    End If
	    
	Exit Sub
	
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_HILCSessionState_ValueChange", Err.Description)
	End Sub
	
	'* For the variable associated to the OPC variable: HILCPreparationReturnCode.Value
	'* *******************************************************************************************
	Private Sub m_OPC_HILCPreparationReturnCode_ValueChange()
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_HILCPreparationReturnCode_ValueChange", "Begin Subroutine")
	    
	    '* Check the status and the quality of the variable
	    If (m_OPC_HILCPreparationReturnCode.Status = fvVariableStatusWaiting) Then
	        Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_HILCPreparationReturnCode_ValueChange", "The Status of " & m_OPC_HILCPreparationReturnCode.Name & " is waiting")
	    ElseIf (m_OPC_HILCPreparationReturnCode.Status = fvVariableStatusConfigError) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_HILCPreparationReturnCode_ValueChange", "The Status of " & m_OPC_HILCPreparationReturnCode.Name & " is config Error")
	    ElseIf (m_OPC_HILCPreparationReturnCode.Status = fvVariableStatusNotConnected) Then
	        Call CBTrace(CBTRACE_VAR, ThisMimic.Name, "m_OPC_HILCPreparationReturnCode_ValueChange", "The Status of " & m_OPC_HILCPreparationReturnCode.Name & " is not connected")
	    ElseIf (m_OPC_HILCPreparationReturnCode.Quality <> 192) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_HILCPreparationReturnCode_ValueChange", "The Quality of " & m_OPC_HILCPreparationReturnCode.Name & " is not Good")
	    Else
	        '* Decode the "Preparation Return Code" message and send the Confirmation message
	        CheckPreparationCode_SendConfirmationMessage
	    End If
	Exit Sub
	    
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_HILCPreparationReturnCode_ValueChange", Err.Description)
	End Sub
	
	'* For the variable associated to the OPC variable : HILCConfirmationReturnCode.Value
	'* *******************************************************************************************
	Private Sub m_OPC_HILCConfirmationReturnCode_ValueChange()
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_HILCConfirmationReturnCode_ValueChange", "Begin Subroutine")
	    
	    '* Check the status and the quality of the variable
	    If (m_OPC_HILCConfirmationReturnCode.Status = fvVariableStatusWaiting) Then
	        Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_HILCConfirmationReturnCode_ValueChange", "The Status of " & m_OPC_HILCConfirmationReturnCode.Name & " is waiting")
	    ElseIf (m_OPC_HILCConfirmationReturnCode.Status = fvVariableStatusConfigError) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_HILCConfirmationReturnCode_ValueChange", "The Status of " & m_OPC_HILCConfirmationReturnCode.Name & " is config Error")
	    ElseIf (m_OPC_HILCConfirmationReturnCode.Status = fvVariableStatusNotConnected) Then
	        Call CBTrace(CBTRACE_VAR, ThisMimic.Name, "m_OPC_HILCConfirmationReturnCode_ValueChange", "The Status of " & m_OPC_HILCConfirmationReturnCode.Name & " is not connected")
	    ElseIf (m_OPC_HILCConfirmationReturnCode.Quality <> 192) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_HILCConfirmationReturnCode_ValueChange", "The Quality of " & m_OPC_HILCConfirmationReturnCode.Name & " is not Good")
	    Else
	        '* Decode and check the "Confirmation Return Code" message
	        CheckConfirmationMessageReturnCode
	    End If
	    
	Exit Sub
	
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_HILCConfirmationReturnCode_ValueChange", Err.Description)
	End Sub
	
	'* For the variable associated to the OPC variable : SourceSSTy.Value
	'* *******************************************************************************************
	Private Sub m_OPC_SourceSSTy_ValueChange()
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_SourceSSTy_ValueChange", "Begin Subroutine")
	    
	    Dim strTraceMsg As String
	    
	    '* Check the status and the quality of the variable
	    If (m_OPC_SourceSSTy.Status = fvVariableStatusWaiting) Then
	        Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_SourceSSTy_ValueChange", "The Status of " & m_OPC_SourceSSTy.Name & " is waiting")
	    ElseIf (m_OPC_SourceSSTy.Status = fvVariableStatusConfigError) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_SourceSSTy_ValueChange", "The Status of " & m_OPC_SourceSSTy.Name & " is config Error")
	    ElseIf (m_OPC_SourceSSTy.Status = fvVariableStatusNotConnected) Then
	        Call CBTrace(CBTRACE_VAR, ThisMimic.Name, "m_OPC_SourceSSTy_ValueChange", "The Status of " & m_OPC_SourceSSTy.Name & " is not connected")
	    ElseIf (m_OPC_SourceSSTy.Quality <> 192) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_SourceSSTy_ValueChange", "The Quality of " & m_OPC_SourceSSTy.Name & " is not Good")
	    Else '* Status and Quality are good
	        strTraceMsg = "Value of SourceSSTy : " & Format(m_OPC_SourceSSTy.Value)
	        Call CBTrace(CBTRACE_VAR, ThisMimic.Name, "m_OPC_SourceSSTy_ValueChange", strTraceMsg)
	    End If
	    
	Exit Sub
	
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_SourceSSTy_ValueChange", Err.Description)
	End Sub
	
	'* For the variable associated to the OPC variable : SourceLogID.Value
	'* *******************************************************************************************
	Private Sub m_OPC_SourceLogID_ValueChange()
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_SourceLogID_ValueChange", "Begin Subroutine")
	    
	    Dim strTraceMsg As String
	    
	    '* Check the status and the quality of the variable
	    If (m_OPC_SourceLogID.Status = fvVariableStatusWaiting) Then
	        Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_SourceLogID_ValueChange", "The Status of " & m_OPC_SourceLogID.Name & " is waiting")
	    ElseIf (m_OPC_SourceLogID.Status = fvVariableStatusConfigError) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_SourceLogID_ValueChange", "The Status of " & m_OPC_SourceLogID.Name & " is config Error")
	    ElseIf (m_OPC_SourceLogID.Status = fvVariableStatusNotConnected) Then
	        Call CBTrace(CBTRACE_VAR, ThisMimic.Name, "m_OPC_SourceLogID_ValueChange", "The Status of " & m_OPC_SourceLogID.Name & " is not connected")
	    ElseIf (m_OPC_SourceLogID.Quality <> 192) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_SourceLogID_ValueChange", "The Quality of " & m_OPC_SourceLogID.Name & " is not Good")
	    Else '* Status and Quality are good
	        strTraceMsg = "Value of SourceLogID : " & Format(m_OPC_SourceLogID.Value)
	        Call CBTrace(CBTRACE_VAR, ThisMimic.Name, "m_OPC_SourceLogID_ValueChange", strTraceMsg)
	    End If
	    
	Exit Sub
	
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_SourceLogID_ValueChange", Err.Description)
	End Sub
	
	'* For the variable associated to the OPC variable : SourceSSID.Value
	'* *******************************************************************************************
	Private Sub m_OPC_SourceSSID_ValueChange()
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_SourceSSID_ValueChange", "Begin Subroutine")
	    
	    Dim strTraceMsg As String
	    
	    '* Check the status and the quality of the variable
	    If (m_OPC_SourceSSID.Status = fvVariableStatusWaiting) Then
	        Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_SourceSSID_ValueChange", "The Status of " & m_OPC_SourceSSID.Name & " is waiting")
	    ElseIf (m_OPC_SourceSSID.Status = fvVariableStatusConfigError) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_SourceSSID_ValueChange", "The Status of " & m_OPC_SourceSSID.Name & " is config Error")
	    ElseIf (m_OPC_SourceSSID.Status = fvVariableStatusNotConnected) Then
	        Call CBTrace(CBTRACE_VAR, ThisMimic.Name, "m_OPC_SourceSSID_ValueChange", "The Status of " & m_OPC_SourceSSID.Name & " is not connected")
	    ElseIf (m_OPC_SourceSSID.Quality <> 192) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_SourceSSID_ValueChange", "The Quality of " & m_OPC_SourceSSID.Name & " is not Good")
	    Else '* Status and Quality are good
	        strTraceMsg = "Value of SourceSSID : " & Format(m_OPC_SourceSSID.Value)
	        Call CBTrace(CBTRACE_VAR, ThisMimic.Name, "m_OPC_SourceSSID_ValueChange", strTraceMsg)
	    End If
	    
	Exit Sub
	
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_SourceSSID_ValueChange", Err.Description)
	End Sub
	
	'* For the variable associated to the OPC variable : DestinationSSTy.Value
	'* *******************************************************************************************
	Private Sub m_OPC_DestinationSSTy_ValueChange()
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_DestinationSSTy_ValueChange", "Begin Subroutine")
	    
	    Dim strTraceMsg As String
	    
	    '* Check the status and the quality of the variable
	    If (m_OPC_DestinationSSTy.Status = fvVariableStatusWaiting) Then
	        Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_DestinationSSTy_ValueChange", "The Status of " & m_OPC_DestinationSSTy.Name & " is waiting")
	    ElseIf (m_OPC_DestinationSSTy.Status = fvVariableStatusConfigError) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_DestinationSSTy_ValueChange", "The Status of " & m_OPC_DestinationSSTy.Name & " is config Error")
	    ElseIf (m_OPC_DestinationSSTy.Status = fvVariableStatusNotConnected) Then
	        Call CBTrace(CBTRACE_VAR, ThisMimic.Name, "m_OPC_DestinationSSTy_ValueChange", "The Status of " & m_OPC_DestinationSSTy.Name & " is not connected")
	    ElseIf (m_OPC_DestinationSSTy.Quality <> 192) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_DestinationSSTy_ValueChange", "The Quality of " & m_OPC_DestinationSSTy.Name & " is not Good")
	    Else '* Status and Quality are good
	        strTraceMsg = "Value of DestinationSSTy : " & Format(m_OPC_DestinationSSTy.Value)
	        Call CBTrace(CBTRACE_VAR, ThisMimic.Name, "m_OPC_DestinationSSTy_ValueChange", strTraceMsg)
	    End If
	    
	Exit Sub
	
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_DestinationSSTy_ValueChange", Err.Description)
	End Sub
	
	'* For the variable associated to the OPC variable : DestinationLogID.Value
	'* *******************************************************************************************
	Private Sub m_OPC_DestinationLogID_ValueChange()
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_DestinationLogID_ValueChange", "Begin Subroutine")
	    
	    Dim strTraceMsg As String
	    
	    '* Check the status and the quality of the variable
	    If (m_OPC_DestinationLogID.Status = fvVariableStatusWaiting) Then
	        Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_DestinationLogID_ValueChange", "The Status of " & m_OPC_DestinationLogID.Name & " is waiting")
	    ElseIf (m_OPC_DestinationLogID.Status = fvVariableStatusConfigError) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_DestinationLogID_ValueChange", "The Status of " & m_OPC_DestinationLogID.Name & " is config Error")
	    ElseIf (m_OPC_DestinationLogID.Status = fvVariableStatusNotConnected) Then
	        Call CBTrace(CBTRACE_VAR, ThisMimic.Name, "m_OPC_DestinationLogID_ValueChange", "The Status of " & m_OPC_DestinationLogID.Name & " is not connected")
	    ElseIf (m_OPC_DestinationLogID.Quality <> 192) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_DestinationLogID_ValueChange", "The Quality of " & m_OPC_DestinationLogID.Name & " is not Good")
	    Else '* Status and Quality are good
	        strTraceMsg = "Value of DestinationLogID : " & Format(m_OPC_DestinationLogID.Value)
	        Call CBTrace(CBTRACE_VAR, ThisMimic.Name, "m_OPC_DestinationLogID_ValueChange", strTraceMsg)
	    End If
	    
	Exit Sub
	
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_DestinationLogID_ValueChange", Err.Description)
	End Sub
	
	'* For the variable associated to the OPC variable : DestinationSSID.Value
	'* *******************************************************************************************
	Private Sub m_OPC_DestinationSSID_ValueChange()
	On Error GoTo ErrorHandler
	    Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_DestinationSSID_ValueChange", "Begin Subroutine")
	    
	    Dim strTraceMsg As String
	    
	    '* Check the status and the quality of the variable
	    If (m_OPC_DestinationSSID.Status = fvVariableStatusWaiting) Then
	        Call CBTrace(CBTRACE_VBA, ThisMimic.Name, "m_OPC_DestinationSSID_ValueChange", "The Status of " & m_OPC_DestinationSSID.Name & " is waiting")
	    ElseIf (m_OPC_DestinationSSID.Status = fvVariableStatusConfigError) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_DestinationSSID_ValueChange", "The Status of " & m_OPC_DestinationSSID.Name & " is config Error")
	    ElseIf (m_OPC_DestinationSSID.Status = fvVariableStatusNotConnected) Then
	        Call CBTrace(CBTRACE_VAR, ThisMimic.Name, "m_OPC_DestinationSSID_ValueChange", "The Status of " & m_OPC_DestinationSSID.Name & " is not connected")
	    ElseIf (m_OPC_DestinationSSID.Quality <> 192) Then
	        Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_DestinationSSID_ValueChange", "The Quality of " & m_OPC_DestinationSSID.Name & " is not Good")
	    Else '* Status and Quality are good
	        strTraceMsg = "Value of DestinationSSID : " & Format(m_OPC_DestinationSSID.Value)
	        Call CBTrace(CBTRACE_VAR, ThisMimic.Name, "m_OPC_DestinationSSID_ValueChange", strTraceMsg)
	    End If
	    
	Exit Sub
	
	ErrorHandler:
	    Call CBTrace(CBTRACEF_ALWAYS, ThisMimic.Name, "m_OPC_DestinationSSID_ValueChange", Err.Description)
	End Sub
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
VBA_HOSTPROJECT,END
VBA_REFERENCES,BEGIN
	"stdole", 2, 0, "{00020430-0000-0000-C000-000000000046}"
	"FrontVueEx", 2, 0, "{141E3228-8E65-44D3-9F4F-DD4799D613BB}"
VBA_REFERENCES,END
FONTS,BEGIN
	FONT,1,-13,0,700,0,0,"Tahoma",0,0
	FONT,2,-13,0,700,0,0,"Arial",0,0
	FONT,3,-11,0,700,0,0,"Tahoma",0,0
	FONT,4,-11,0,400,0,0,"Tahoma",0,0
	FONT,5,-21,0,400,0,0,"Tahoma",0,0
FONTS,END
COLORS,BEGIN
	COLOR,1,0,0,0,0,0,0
	COLOR,2,0,0,0,0,0,1
	COLOR,3,255,255,255,0,0,0
	COLOR,4,172,168,153,0,0,0
	COLOR,5,128,128,128,0,0,0
COLORS,END
O,BEGIN,T,"LabelStatus"
	B,7,70,61,86,7,86,65535,0,6400,0,1,1,1
	ST,0,1,COLOR,1,COLOR,1,0,0,COLOR,2,0,COLOR,2,0,COLOR,1,0,COLOR,1
	PP,0,7,70,0,0,FONT,1,"Status",36,FONT,1,"Status",36
	MULTILANG,BEGIN
		LANG_DEFAULT,1033
		LANG,BEGIN,1033
			ROLE_DEFAULT,-1
			ROLE,-1,"Estado",FONT,2,36
		LANG,END
		LANG,BEGIN,1043
			ROLE_DEFAULT,0
			ROLE,0,"Status",FONT,3,36
		LANG,END
	MULTILANG,END
O,END
O,BEGIN,T,"ButtonOK"
	B,149,135,223,158,149,158,65535,0,6400,0,1,1,1
	ST,0,1,COLOR,1,COLOR,1,0,0,COLOR,2,0,COLOR,2,0,COLOR,1,0,COLOR,1
	AST,7,2,COLOR,1,COLOR,2,0,COLOR,4,0,COLOR,4,0,COLOR,3,0,COLOR,3
	PP,1,149,135,0,0,FONT,1,"OK",37,FONT,1,"OK",37
	MULTILANG,BEGIN
		LANG_DEFAULT,1033
		LANG,BEGIN,1033
			ROLE_DEFAULT,-1
			ROLE,-1,"Ejecutar",FONT,2,37
		LANG,END
		LANG,BEGIN,1043
			ROLE_DEFAULT,0
			ROLE,0," OK ",FONT,4,37
		LANG,END
	MULTILANG,END
	A,BEGIN,CB,"Anim1",0,0,"",""
		PP,"ButtonOKDisabled%"
		COL,0,COLOR,2,COLOR,2
		COL,0,COLOR,2,COLOR,2
		COL,0,COLOR,2,COLOR,2
		COL,1,COLOR,1,COLOR,1
		COL,1,COLOR,5,COLOR,5
		COL,0,COLOR,2,COLOR,2
	A,END
	A,BEGIN,SB,"Anim2",0,0,"",""
		PP,"Notused%",0,0,0,0,0.000000
	A,END
O,END
O,BEGIN,T,"LabelCloseSessionMessage"
	B,10,15,325,60,10,60,65535,0,6400,0,1,1,1
	ST,0,1,COLOR,1,COLOR,1,0,0,COLOR,2,0,COLOR,2,0,COLOR,1,0,COLOR,1
	PP,1,10,15,0,0,FONT,1,"Do you want to open a TSR session?",85,FONT,1,"Do you want to open a TSR session?",85
	MULTILANG,BEGIN
		LANG_DEFAULT,1033
		LANG,BEGIN,1033
			ROLE_DEFAULT,-1
			ROLE,-1,"¨Desea cerrar la sesi¢n RTV?",FONT,2,85
		LANG,END
		LANG,BEGIN,1043
			ROLE_DEFAULT,0
			ROLE,0,"Wilt u de LC sessie sluiten?",FONT,3,84
		LANG,END
	MULTILANG,END
	A,BEGIN,DT,"Anim1",0,0,"",""
		PP,"QuestionText%"
	A,END
O,END
O,BEGIN,T,"ButtonCancel"
	B,246,135,320,158,246,158,65535,0,6400,0,1,1,1
	ST,0,1,COLOR,1,COLOR,1,0,0,COLOR,2,0,COLOR,2,0,COLOR,1,0,COLOR,1
	AST,7,2,COLOR,1,COLOR,2,0,COLOR,4,0,COLOR,4,0,COLOR,3,0,COLOR,3
	PP,1,246,135,0,0,FONT,1,"Cancel",37,FONT,1,"Cancel",37
	MULTILANG,BEGIN
		LANG_DEFAULT,1033
		LANG,BEGIN,1033
			ROLE_DEFAULT,-1
			ROLE,-1,"Cancelar",FONT,2,37
		LANG,END
		LANG,BEGIN,1043
			ROLE_DEFAULT,0
			ROLE,0,"Annuleer",FONT,4,37
		LANG,END
	MULTILANG,END
	A,BEGIN,CB,"Anim1",0,0,"",""
		PP,"ButtonCancelDisabled%"
		COL,0,COLOR,2,COLOR,2
		COL,0,COLOR,2,COLOR,2
		COL,0,COLOR,2,COLOR,2
		COL,1,COLOR,1,COLOR,1
		COL,1,COLOR,5,COLOR,5
		COL,0,COLOR,2,COLOR,2
	A,END
	A,BEGIN,SB,"Anim3",0,0,"",""
		PP,"@CmdButtonsDisabled%",1,0,0,0,0.000000
		AUTH,"ButtonCancelDisabled%",0,0,0
	A,END
	A,BEGIN,LC,"Anim2",0,0,"",""
		PP,"*","*"
		AUTH,"ButtonCancelDisabled%",0,0,0
	A,END
O,END
O,BEGIN,S,"Symbol5"
	B,326,125,7,85,7,125,65535,0,6400,0,1,0,0
	PP,"HILC_Status","",326,125,7,85,0,0, 0, 1
O,END
O,BEGIN,T,"txtWZQuestion"
	B,379,139,472,155,379,155,65535,0,6400,0,1,1,1
	ST,0,1,COLOR,1,COLOR,1,0,0,COLOR,2,0,COLOR,2,0,COLOR,1,0,COLOR,1
	PP,1,379,139,0,0,FONT,5,"",37,FONT,5,"",37
	MULTILANG,BEGIN
		LANG_DEFAULT,1033
		LANG,BEGIN,1033
			ROLE_DEFAULT,-1
			ROLE,-1,"¨Desea cerrar la sesi¢n RTV?",FONT,4,37
		LANG,END
		LANG,BEGIN,1043
			ROLE_DEFAULT,0
			ROLE,0,"Wilt u de LC sessie sluiten?",FONT,4,37
		LANG,END
	MULTILANG,END
O,END
O,BEGIN,T,"txtWZForcedQuestion"
	B,391,159,484,175,391,175,65535,0,6400,0,1,1,1
	ST,0,1,COLOR,1,COLOR,1,0,0,COLOR,2,0,COLOR,2,0,COLOR,1,0,COLOR,1
	PP,1,391,159,0,0,FONT,4,"Do you want to close the session with the LC?",37,FONT,4,"Do you want to close the session with the LC?",37
	MULTILANG,BEGIN
		LANG_DEFAULT,1033
		LANG,BEGIN,1033
			ROLE_DEFAULT,-1
			ROLE,-1,"¨Desea forzar el cierre de esta sesi¢n y volver a abrirla automaticamente?",FONT,4,37
		LANG,END
		LANG,BEGIN,1043
			ROLE_DEFAULT,0
			ROLE,0,"Wilt u deze sessie geforceerd sluiten en automatisch heropenen?",FONT,4,37
		LANG,END
	MULTILANG,END
O,END
